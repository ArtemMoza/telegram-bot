import json
import os
import requests
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
RELEASES_FILE = 'releases.json'
ROLES_FILE = 'roles.json'
GOOGLE_SCRIPT_URL = "https://script.google.com/macros/s/AKfycbze_m_fmwBClM9C276BwshOjS_SXWz6HiKq-C0Z5JXcauOU4trUGpVcKbsCEuqVm5zq/exec"

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
def load_releases():
    if not os.path.exists(RELEASES_FILE):
        return {}
    with open(RELEASES_FILE, 'r') as f:
        return json.load(f)

def save_releases(data):
    with open(RELEASES_FILE, 'w') as f:
        json.dump(data, f, indent=4)

def load_roles():
    if not os.path.exists(ROLES_FILE):
        return {}
    with open(ROLES_FILE, 'r') as f:
        return json.load(f)

def save_roles(roles):
    with open(ROLES_FILE, 'w') as f:
        json.dump(roles, f, indent=2)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–ª–∏–∑–∞ –≤ Google –¢–∞–±–ª–∏—Ü—É
def add_release_to_gsheet(title, artist, status="–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"):
    data = {
        "title": title,
        "artist": artist,
        "status": status
    }
    try:
        response = requests.post(GOOGLE_SCRIPT_URL, data=data)
        print("–†–µ–ª–∏–∑ –≤ —Ç–∞–±–ª–∏—Ü—É:", response.text)
    except Exception as e:
        print("–û—à–∏–±–∫–∞:", str(e))

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã –≤ Google –¢–∞–±–ª–∏—Ü—É
def report_issue_to_gsheet(title, username, issue):
    data = {
        "title": title,
        "username": username,
        "issue": issue
    }
    print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: {data}")  # –ü–µ—á–∞—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    try:
        response = requests.post(GOOGLE_SCRIPT_URL, data=data)
        if response.status_code == 200:
            print("–ñ–∞–ª–æ–±–∞ –≤ —Ç–∞–±–ª–∏—Ü—É:", response.text)
        else:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã:", response.text)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã:", str(e))

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–Ø –º–µ–Ω–µ–¥–∂–µ—Ä", callback_data="set_role_manager")],
        [InlineKeyboardButton("–Ø –∞—Ä—Ç–∏—Å—Ç", callback_data="set_role_artist")]
    ]
    await update.message.reply_text("–ö—Ç–æ –≤—ã?", reply_markup=InlineKeyboardMarkup(keyboard))

# –ú–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞
async def send_manager_menu(query):
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ª–∏–∑", callback_data="manager_add_release")],
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="manager_check_status")],
        [InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å: –û–¥–æ–±—Ä–µ–Ω –∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω", callback_data="step_approved")]
    ]
    await query.edit_message_text("–ú–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

# –ú–µ–Ω—é –∞—Ä—Ç–∏—Å—Ç–∞
async def send_artist_menu(query):
    keyboard = [
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–ª–∏–∑–∞", callback_data="artist_check_status")],
        [InlineKeyboardButton("–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ", callback_data="artist_report_issue")]
    ]
    await query.edit_message_text("–ú–µ–Ω—é –∞—Ä—Ç–∏—Å—Ç–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)
    roles = load_roles()

    await query.answer()

    if query.data == "set_role_manager":
        roles[user_id] = "manager"
        save_roles(roles)
        await send_manager_menu(query)

    elif query.data == "set_role_artist":
        roles[user_id] = "artist"
        save_roles(roles)
        await send_artist_menu(query)

    elif query.data == "manager_add_release":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –∏ @–∞—Ä—Ç–∏—Å—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
        context.user_data['next_action'] = 'add_release'

    elif query.data == "manager_check_status":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        context.user_data['next_action'] = 'check_status'

    elif query.data == "step_approved":
        context.user_data["next_action"] = "update_step"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å '–û–¥–æ–±—Ä–µ–Ω –∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω':")

    elif query.data == "artist_check_status":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Ä–µ–ª–∏–∑–∞:")
        context.user_data["next_action"] = "artist_check_status"

    elif query.data == "artist_report_issue":
        await query.edit_message_text("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞:")
        context.user_data["next_action"] = "report_issue"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    roles = load_roles()
    role = roles.get(user_id)
    action = context.user_data.get("next_action")

    if role == "manager":
        if action == "add_release":
            parts = update.message.text.strip().split()
            if len(parts) != 2:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ @–∞—Ä—Ç–∏—Å—Ç")
                return
            title, artist = parts
            releases = load_releases()
            releases[title] = {
                "artist": artist,
                "status": "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
            }
            save_releases(releases)
            add_release_to_gsheet(title, artist)
            await update.message.reply_text(f"–†–µ–ª–∏–∑ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω.")
            context.user_data.clear()

        elif action == "check_status":
            await show_status(update, update.message.text.strip())
            context.user_data.clear()

        elif action == "update_step":
            title = update.message.text.strip()
            releases = load_releases()
            if title in releases:
                releases[title]["status"] = "–û–¥–æ–±—Ä–µ–Ω –∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
                save_releases(releases)
                await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è '{title}': –û–¥–æ–±—Ä–µ–Ω –∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
                await context.bot.send_message(
                    chat_id=releases[title]["artist"],
                    text=f"‚úÖ –í–∞—à —Ä–µ–ª–∏–∑ '{title}' –ø–æ–ª—É—á–∏–ª —Å—Ç–∞—Ç—É—Å: –û–¥–æ–±—Ä–µ–Ω –∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
                )
            else:
                await update.message.reply_text("–†–µ–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            context.user_data.clear()

    elif role == "artist":
        if action == "artist_check_status":
            title = update.message.text.strip()
            releases = load_releases()
            release = releases.get(title)
            if release and release["artist"] == f"@{update.message.from_user.username}":
                await show_status(update, title)
            else:
                await update.message.reply_text("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–≥–æ —Ä–µ–ª–∏–∑–∞.")
            context.user_data.clear()

        elif action == "report_issue":
            issue_text = update.message.text.strip()
            username = update.message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            title = issue_text.split()[0] if issue_text else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            report_issue_to_gsheet(title, username, issue_text)
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, –ø—Ä–æ–±–ª–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É!")
            context.user_data.clear()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–ª–∏–∑–∞
async def show_status(update, title):
    releases = load_releases()
    if title in releases:
        status = releases[title]["status"]
        await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å —Ä–µ–ª–∏–∑–∞ '{title}': {status}")
    else:
        await update.message.reply_text("–†–µ–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token("7989351182:AAHZrsNWZEQR-Fsd2PzaK2-SJyyIvIEHJXU").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()